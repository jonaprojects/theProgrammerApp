import { Questions } from "./models";
const assemblyQuestions: Questions = [
  {
    id: 1,
    question: "מהו תפקידו העיקרי של רגיסטר המחסנית (Stack Pointer)?",
    type: "multiple",
    correctAnswer: "מצביע על ראש המחסנית",
    incorrectAnswers: [
      "מצביע על בסיס המחסנית",
      "מונה את מספר הפעולות",
      "מאחסן את התוצאה האחרונה",
    ],
    explanation:
      "רגיסטר המחסנית (Stack Pointer) מצביע תמיד על ראש המחסנית, כלומר על המיקום האחרון שבו נוסף או הוסר מידע מהמחסנית.",
  },
  {
    id: 2,
    question: "האם ניתן לבצע פעולות אריתמטיות ישירות על ערכים בזיכרון?",
    type: "yesno",
    correctAnswer: false,
    explanation:
      "ברוב ארכיטקטורות המעבד, לא ניתן לבצע פעולות אריתמטיות ישירות על ערכים בזיכרון. בדרך כלל, יש לטעון את הערכים לרגיסטרים, לבצע את הפעולה, ואז לשמור את התוצאה בחזרה בזיכרון אם נדרש.",
  },
  {
    id: 3,
    question: "מהו תפקידו של דגל הגלישה (Overflow Flag)?",
    type: "multiple",
    correctAnswer: "מציין גלישה בפעולות על מספרים עם סימן",
    incorrectAnswers: [
      "מציין שגיאת חלוקה באפס",
      "מסמן סיום של לולאה",
      "מציין שהמחסנית מלאה",
    ],
    explanation:
      "דגל הגלישה (Overflow Flag) מופעל כאשר תוצאה של פעולה אריתמטית על מספרים עם סימן חורגת מהטווח שניתן לייצג במספר הביטים הנתון.",
  },
  {
    id: 4,
    question: "מהי המטרה העיקרית של פעולת הזזה לוגית (Logical Shift)?",
    type: "multiple",
    correctAnswer: "הכפלה או חלוקה בחזקות של 2",
    incorrectAnswers: ["שינוי סדר הביטים", "בדיקת זוגיות", "הצפנת מידע"],
    explanation:
      "פעולת הזזה לוגית משמשת לעתים קרובות להכפלה או חלוקה מהירה בחזקות של 2. הזזה שמאלה מכפילה ב-2, והזזה ימינה מחלקת ב-2.",
  },
  {
    id: 5,
    question: "האם קיים הבדל בין פעולת JUMP לפעולת CALL?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, קיים הבדל משמעותי. פעולת JUMP פשוט מעבירה את זרימת התוכנית למיקום אחר, בעוד פעולת CALL שומרת את כתובת החזרה במחסנית לפני המעבר, מה שמאפשר חזרה לנקודת הקריאה בסיום הפרוצדורה.",
  },
  {
    id: 6,
    question: "מהו תפקידה של פעולת השוואה (CMP) בשפת אסמבלי?",
    type: "multiple",
    correctAnswer: "עדכון דגלים לצורך קבלת החלטות",
    incorrectAnswers: [
      "חיסור שני מספרים",
      "בדיקת שוויון בלבד",
      "החלפת ערכים בין רגיסטרים",
    ],
    explanation:
      "פעולת ההשוואה (CMP) מבצעת חיסור בין שני ערכים ומעדכנת את דגלי המעבד בהתאם לתוצאה, מבלי לשמור את תוצאת החיסור. הדגלים המעודכנים משמשים לאחר מכן לקבלת החלטות בפקודות קפיצה מותנית.",
  },
  {
    id: 7,
    question: "מהי המטרה העיקרית של שימוש במחסנית בתכנות אסמבלי?",
    type: "multiple",
    correctAnswer: "שמירת מצב המעבד וניהול קריאות לפרוצדורות",
    incorrectAnswers: [
      "אחסון קבוע של נתונים",
      "ביצוע חישובים מהירים",
      "ניהול זיכרון דינמי",
    ],
    explanation:
      "המחסנית משמשת בעיקר לשמירת מצב המעבד (כמו ערכי רגיסטרים) ולניהול קריאות לפרוצדורות, כולל שמירת כתובות חזרה והעברת פרמטרים.",
  },
  {
    id: 8,
    question: "האם פעולת XOR של ערך עם עצמו תמיד תניב תוצאה 0?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, פעולת XOR של כל ערך עם עצמו תמיד תניב 0. זוהי תכונה של פעולת ה-XOR, והיא משמשת לעתים קרובות כדרך יעילה לאפס רגיסטר.",
  },
  {
    id: 9,
    question:
      "מהו היתרון העיקרי של שימוש בפקודות מותנות (Conditional Instructions) על פני קפיצות מותנות?",
    type: "multiple",
    correctAnswer: "שיפור ביצועים על ידי הימנעות מניבוי שגוי של סעיפים",
    incorrectAnswers: [
      "הקטנת גודל הקוד",
      "הגברת קריאות הקוד",
      "הקלה על עבודת המהדר",
    ],
    explanation:
      "פקודות מותנות מאפשרות ביצוע פעולות קצרות ללא צורך בקפיצה, מה שמשפר את הביצועים על ידי הימנעות מניבוי שגוי של סעיפים (branch misprediction) במעבדים מודרניים.",
  },
  {
    id: 10,
    question: "האם ניתן לבצע קריאה ישירה למערכת ההפעלה משפת אסמבלי?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, שפת אסמבלי מאפשרת ביצוע קריאות מערכת (system calls) ישירות למערכת ההפעלה. זה נעשה בדרך כלל באמצעות פסיקות תוכנה או הוראות מיוחדות, בהתאם לארכיטקטורה ולמערכת ההפעלה.",
  },
  {
    id: 11,
    question: "מהו תפקידו של סגמנט הקוד (Code Segment) בתכנות אסמבלי?",
    type: "multiple",
    correctAnswer: "אחסון הוראות התוכנית",
    incorrectAnswers: [
      "אחסון משתנים גלובליים",
      "ניהול המחסנית",
      "שמירת קבועים",
    ],
    explanation:
      "סגמנט הקוד (Code Segment) משמש לאחסון הוראות התוכנית. זהו האזור בזיכרון שבו נשמרות ההוראות שהמעבד מבצע.",
  },
  {
    id: 12,
    question: "האם פעולת הזזה אריתמטית (Arithmetic Shift) שומרת על סימן המספר?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, פעולת הזזה אריתמטית שומרת על סימן המספר. בהזזה ימינה, הסיבית השמאלית ביותר (סיבית הסימן) מועתקת לעמדות שמתפנות, ובכך נשמר הסימן.",
  },
  {
    id: 13,
    question: "מהו תפקידו של רגיסטר הדגלים (Flags Register)?",
    type: "multiple",
    correctAnswer: "אחסון מידע על תוצאות פעולות קודמות",
    incorrectAnswers: [
      "ניהול תזמון המעבד",
      "שמירת כתובת ההוראה הנוכחית",
      "אחסון נתונים זמניים",
    ],
    explanation:
      "רגיסטר הדגלים מאחסן מידע על תוצאות פעולות קודמות, כגון האם התוצאה הייתה אפס, האם הייתה גלישה, וכו'. מידע זה משמש לקבלת החלטות בפקודות מותנות.",
  },
  {
    id: 14,
    question: "מהי המטרה העיקרית של פעולת NOP (No Operation)?",
    type: "multiple",
    correctAnswer: "יצירת השהיה או יישור קוד",
    incorrectAnswers: ["איפוס כל הרגיסטרים", "סיום התוכנית", "מחיקת המחסנית"],
    explanation:
      "פעולת NOP משמשת בעיקר ליצירת השהיה קצרה או ליישור קוד למטרות אופטימיזציה. היא לא משנה את מצב המעבד מלבד קידום מונה התוכנית.",
  },
  {
    id: 15,
    question: "האם ניתן לבצע פעולות אריתמטיות על כתובות זיכרון?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, ניתן לבצע פעולות אריתמטיות על כתובות זיכרון. זה מאפשר חישוב כתובות דינמיות, למשל לגישה לאיברים במערך או במבני נתונים מורכבים.",
  },
  {
    id: 16,
    question: "מהו היתרון העיקרי של שימוש ברגיסטרים לעומת משתנים בזיכרון?",
    type: "multiple",
    correctAnswer: "גישה מהירה יותר",
    incorrectAnswers: [
      "קיבולת גדולה יותר",
      "אבטחה משופרת",
      "תאימות בין פלטפורמות",
    ],
    explanation:
      "היתרון העיקרי של שימוש ברגיסטרים הוא הגישה המהירה יותר אליהם לעומת גישה לזיכרון. רגיסטרים הם החלק המהיר ביותר במערכת הזיכרון של המחשב.",
  },
  {
    id: 17,
    question: "מהי מטרתה של פקודת PUSHF?",
    type: "multiple",
    correctAnswer: "דחיפת רגיסטר הדגלים למחסנית",
    incorrectAnswers: [
      "דחיפת כל הרגיסטרים למחסנית",
      "הפעלת כל הדגלים",
      "איפוס רגיסטר הדגלים",
    ],
    explanation:
      "פקודת PUSHF (Push Flags) דוחפת את ערכו הנוכחי של רגיסטר הדגלים למחסנית. זה שימושי לשמירת מצב הדגלים לפני ביצוע פעולות שעשויות לשנות אותם.",
  },
  {
    id: 18,
    question: "האם ניתן לבצע קפיצה לכתובת המאוחסנת ברגיסטר?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, ברוב ארכיטקטורות המעבד ניתן לבצע קפיצה לכתובת המאוחסנת ברגיסטר. זה מאפשר קפיצות דינמיות, שימושיות למימוש טבלאות קפיצה או קריאות לפונקציות וירטואליות.",
  },
  {
    id: 19,
    question: "מהו תפקידה של פקודת LEA (Load Effective Address)?",
    type: "multiple",
    correctAnswer: "חישוב כתובת ללא גישה לזיכרון",
    incorrectAnswers: [
      "טעינת ערך מהזיכרון",
      "ביצוע פעולה אריתמטית",
      "הגדרת תווית בקוד",
    ],
    explanation:
      "פקודת LEA מחשבת כתובת אפקטיבית ומאחסנת אותה ברגיסטר, מבלי לגשת לזיכרון בפועל. היא שימושית לחישובי כתובות מורכבים או כדרך מהירה לביצוע פעולות אריתמטיות פשוטות.",
  },
  {
    id: 20,
    question: "האם שימוש בפסיקות (Interrupts) מאפשר תקשורת בין תוכנה לחומרה?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, פסיקות משמשות כמנגנון מרכזי לתקשורת בין תוכנה לחומרה. הן מאפשרות להתקני חומרה לאותת למעבד על אירועים, ולתוכנה לבקש שירותים ממערכת ההפעלה או מהחומרה.",
  },
  {
    id: 21,
    question: "מהו תפקידו של רגיסטר המקטע (Segment Register)?",
    type: "multiple",
    correctAnswer: "הגדרת בסיס לחישוב כתובות",
    incorrectAnswers: [
      "אחסון תוצאות זמניות",
      "ספירת מספר ההוראות שבוצעו",
      "שמירת מצב המעבד",
    ],
    explanation:
      "רגיסטרי מקטע משמשים להגדרת בסיס לחישוב כתובות בזיכרון. הם מאפשרים גישה למקטעים שונים של הזיכרון כמו קוד, נתונים ומחסנית.",
  },
  {
    id: 22,
    question:
      "האם ניתן לשנות את ערכו של מונה התוכנית (Program Counter) באופן ישיר?",
    type: "yesno",
    correctAnswer: false,
    explanation:
      "ברוב הארכיטקטורות, לא ניתן לשנות את ערכו של מונה התוכנית באופן ישיר. הוא משתנה אוטומטית עם ביצוע ההוראות או באמצעות פקודות קפיצה וקריאה לפרוצדורות.",
  },
  {
    id: 23,
    question: "מהי מטרתה של פקודת CPUID?",
    type: "multiple",
    correctAnswer: "זיהוי יכולות המעבד",
    incorrectAnswers: [
      "העתקת זיהוי התהליך",
      "יצירת מזהה ייחודי לתוכנית",
      "הצפנת נתונים",
    ],
    explanation:
      "פקודת CPUID משמשת לזיהוי יכולות המעבד. היא מאפשרת לתוכנה לקבל מידע על סוג המעבד, התכונות שהוא תומך בהן, ומידע נוסף על החומרה.",
  },
  {
    id: 24,
    question:
      "מהו היתרון העיקרי של שימוש בפקודות SIMD (Single Instruction, Multiple Data)?",
    type: "multiple",
    correctAnswer: "ביצוע מקבילי של פעולות על מספר ערכים",
    incorrectAnswers: ["חיסכון בזיכרון", "פישוט הקוד", "הגברת דיוק החישובים"],
    explanation:
      "פקודות SIMD מאפשרות ביצוע של אותה פעולה על מספר ערכי נתונים במקביל, מה שמגביר משמעותית את ביצועי התוכנית בפעולות כמו עיבוד מדיה או חישובים מדעיים.",
  },
  {
    id: 25,
    question: "האם פקודת RET חייבת להופיע בסוף כל פרוצדורה?",
    type: "yesno",
    correctAnswer: false,
    explanation:
      "לא בהכרח. בעוד שפקודת RET משמשת בדרך כלל לחזרה מפרוצדורה, פרוצדורה יכולה להסתיים גם בקפיצה לנקודה אחרת בקוד או להמשיך לפרוצדורה אחרת ללא חזרה ישירה.",
  },
  {
    id: 26,
    question: "מהו תפקידה של פקודת XCHG?",
    type: "multiple",
    correctAnswer: "החלפת ערכים בין שני אופרנדים",
    incorrectAnswers: [
      "ביצוע פעולת XOR",
      "הרחבת ערך ל-64 ביט",
      "בדיקת שוויון בין שני ערכים",
    ],
    explanation:
      "פקודת XCHG (Exchange) משמשת להחלפת ערכים בין שני אופרנדים, כמו שני רגיסטרים או רגיסטר וכתובת זיכרון, בפעולה אחת.",
  },
  {
    id: 27,
    question: "מהי משמעותה של הוראת הקומפיילר ALIGN?",
    type: "multiple",
    correctAnswer: "יישור הקוד לגבול זיכרון מסוים",
    incorrectAnswers: [
      "סנכרון בין מספר תהליכים",
      "איחוד מספר הוראות להוראה אחת",
      "הבטחת סדר ביצוע של הוראות",
    ],
    explanation:
      "הוראת ALIGN משמשת ליישור הקוד או הנתונים לגבול זיכרון מסוים (למשל, 4 בתים או 16 בתים). זה יכול לשפר את ביצועי הגישה לזיכרון ולעתים נדרש על ידי הארכיטקטורה.",
  },
  {
    id: 28,
    question:
      "האם ניתן לבצע פעולות עם מספרים בנקודה צפה ישירות ברגיסטרים הכלליים?",
    type: "yesno",
    correctAnswer: false,
    explanation:
      "לא, ברוב הארכיטקטורות, פעולות עם מספרים בנקודה צפה מבוצעות ברגיסטרים מיוחדים לנקודה צפה או ביחידות SIMD, ולא ברגיסטרים הכלליים.",
  },
  {
    id: 29,
    question: "מהו תפקידה של פקודת SETcc (כגון SETE, SETNE)?",
    type: "multiple",
    correctAnswer: "הגדרת ערך בוליאני בהתאם לדגלים",
    incorrectAnswers: [
      "קביעת ערכי הדגלים",
      "הגדרת נקודת עצירה בדיבאגר",
      "איפוס רגיסטר",
    ],
    explanation:
      "פקודות SETcc (Set on Condition) מגדירות ערך בוליאני (0 או 1) באופרנד היעד בהתאם למצב הדגלים. הן שימושיות ליישום ביטויים לוגיים מורכבים.",
  },
  {
    id: 30,
    question: "מהי המטרה העיקרית של שימוש במאקרו בתכנות אסמבלי?",
    type: "multiple",
    correctAnswer: "הגדרת רצף פקודות שחוזר על עצמו",
    incorrectAnswers: [
      "יצירת לולאות",
      "הגדרת משתנים גלובליים",
      "יצירת פונקציות רקורסיביות",
    ],
    explanation:
      "מאקרו בתכנות אסמבלי משמש להגדרת רצף פקודות שחוזר על עצמו. הוא מאפשר לקצר את הקוד, להפחית שגיאות, ולשפר את קריאות הקוד על ידי הגדרת פעולות מורכבות כיחידה אחת.",
  },
  {
    id: 31,
    question: "מהו תפקידה של פקודת SYSCALL?",
    type: "multiple",
    correctAnswer: "ביצוע קריאת מערכת",
    incorrectAnswers: [
      "קריאה לפונקציה מספריית זמן ריצה",
      "יצירת תהליך חדש",
      "סנכרון בין חוטים",
    ],
    explanation:
      "פקודת SYSCALL משמשת לביצוע קריאת מערכת (system call), מאפשרת לתוכנית לבקש שירותים ממערכת ההפעלה, כמו קריאה וכתיבה לקבצים או הקצאת זיכרון.",
  },
  {
    id: 32,
    question: "האם ניתן לשנות את סדר הביצוע של הוראות על ידי המעבד?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, מעבדים מודרניים משתמשים בטכניקות כמו ביצוע מחוץ לסדר (out-of-order execution) כדי לשפר ביצועים. עם זאת, המעבד מבטיח שהתוצאה הסופית תהיה כאילו ההוראות בוצעו בסדר המקורי.",
  },
  {
    id: 33,
    question: "מהו תפקידו של רגיסטר ה-EFLAGS?",
    type: "multiple",
    correctAnswer: "אחסון דגלי מצב ובקרה",
    incorrectAnswers: [
      "ניהול זיכרון וירטואלי",
      "שמירת כתובת ההוראה הנוכחית",
      "אחסון תוצאות חישובים זמניים",
    ],
    explanation:
      "רגיסטר ה-EFLAGS מכיל מספר דגלי מצב ובקרה, כולל דגלי תוצאה של פעולות אריתמטיות ולוגיות, דגלי בקרת הפסיקות, ודגלים נוספים שמשפיעים על התנהגות המעבד.",
  },
  {
    id: 34,
    question: "מהי מטרתה של טכניקת ה-SIMD (Single Instruction, Multiple Data)?",
    type: "multiple",
    correctAnswer: "ביצוע מקבילי של אותה פעולה על מספר ערכי נתונים",
    incorrectAnswers: [
      "הגדלת מהירות הגישה לזיכרון",
      "שיפור דיוק החישובים",
      "הפחתת צריכת החשמל של המעבד",
    ],
    explanation:
      "טכניקת SIMD מאפשרת ביצוע של אותה פעולה על מספר ערכי נתונים במקביל, מה שמשפר משמעותית את הביצועים בפעולות כמו עיבוד מדיה או חישובים מדעיים.",
  },
  {
    id: 35,
    question:
      "האם ניתן לגשת ישירות לזיכרון הפיזי מתוך תוכנית אסמבלי הרצה במצב משתמש?",
    type: "yesno",
    correctAnswer: false,
    explanation:
      "לא, במערכות הפעלה מודרניות, תוכניות הרצות במצב משתמש אינן יכולות לגשת ישירות לזיכרון הפיזי. הן מוגבלות לגישה לזיכרון וירטואלי שמנוהל על ידי מערכת ההפעלה.",
  },
  {
    id: 36,
    question: "מהו תפקידה של פקודת PAUSE?",
    type: "multiple",
    correctAnswer: "שיפור ביצועים בלולאות המתנה",
    incorrectAnswers: [
      "עצירת ביצוע התוכנית",
      "השהיית פסיקות",
      "מעבר למצב חיסכון באנרגיה",
    ],
    explanation:
      "פקודת PAUSE משמשת לשיפור ביצועים בלולאות המתנה (spin-wait loops). היא מרמזת למעבד שהתוכנית נמצאת בלולאת המתנה, מה שמאפשר לו לחסוך באנרגיה ולשפר את הביצועים במערכות רב-ליבתיות.",
  },
  {
    id: 37,
    question: "מהי מטרתה של טכניקת ה-Branch Prediction?",
    type: "multiple",
    correctAnswer: "ניחוש מראש של תוצאות הסתעפויות בקוד",
    incorrectAnswers: [
      "מניעת לולאות אינסופיות",
      "אופטימיזציה של קריאות לפונקציות",
      "הפחתת השימוש בזיכרון",
    ],
    explanation:
      "טכניקת Branch Prediction מנסה לנחש מראש את תוצאות ההסתעפויות (כמו פקודות IF) בקוד. זה מאפשר למעבד להתחיל בביצוע ההוראות הבאות לפני שידוע בוודאות איזה מסלול יבוצע, מה שמשפר את הביצועים.",
  },
  {
    id: 38,
    question: "האם פקודת MOV יכולה לשנות את ערכי הדגלים?",
    type: "yesno",
    correctAnswer: false,
    explanation:
      "לא, פקודת MOV רגילה אינה משנה את ערכי הדגלים. היא מעתיקה נתונים ממקור ליעד מבלי להשפיע על דגלי המצב.",
  },
  {
    id: 39,
    question: "האם אסמבלי היא שפת תכנות עילית?",
    type: "yesno",
    correctAnswer: false,
    explanation: "לא, שפת אסמבלי היא שפת תכנות תחתית, הקרובה מאוד לשפת המכונה.",
  },
  {
    id: 40,
    question: "מהי מטרתה של פקודת JMP באסמבלי?",
    type: "multiple",
    correctAnswer: "לבצע קפיצה לא מותנית לכתובת מסוימת",
    incorrectAnswers: [
      "להוסיף שני מספרים",
      "לשמור מידע בזיכרון",
      "לקרוא קלט מהמשתמש",
    ],
    explanation: "פקודת JMP משמשת לביצוע קפיצה לא מותנית לכתובת מסוימת בקוד.",
  },
  {
    id: 41,
    question: "האם ניתן לכתוב תוכניות מורכבות באסמבלי?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, ניתן לכתוב תוכניות מורכבות באסמבלי, אך זה עשוי להיות מסובך ומועד לטעויות יותר מאשר בשפות ברמה גבוהה.",
  },
  {
    id: 42,
    question: "מהו תפקידו של אוגר EAX באסמבלי x86?",
    type: "multiple",
    correctAnswer: "אוגר כללי המשמש לרוב לתוצאות של פעולות אריתמטיות",
    incorrectAnswers: [
      "אוגר המצביע על מחסנית התוכנית",
      "אוגר המכיל את כתובת ההוראה הבאה לביצוע",
      "אוגר המשמש לאחסון דגלי מצב",
    ],
    explanation:
      "EAX הוא אוגר כללי ב-x86 שמשמש לרוב לאחסון תוצאות של פעולות אריתמטיות.",
  },
  {
    id: 43,
    question: "האם פקודת DIV באסמבלי מבצעת חילוק בשלמים או במספרים עשרוניים?",
    type: "multiple",
    correctAnswer: "תלוי בגודל האופרנדים",
    incorrectAnswers: ["תמיד בשלמים", "תמיד במספרים עשרוניים", "תלוי במעבד"],
    explanation:
      "פקודת DIV יכולה לבצע חילוק בשלמים או במספרים עשרוניים, תלוי בגודל האופרנדים שבשימוש.",
  },
  {
    id: 44,
    question: "מהו תפקידה של פקודת PUSH באסמבלי?",
    type: "multiple",
    correctAnswer: "להכניס ערך למחסנית",
    incorrectAnswers: [
      "להוציא ערך מהמחסנית",
      "לבצע פעולת כפל",
      "לקרוא מידע מהזיכרון",
    ],
    explanation:
      "פקודת PUSH משמשת להכנסת ערך למחסנית, מה שמאפשר שמירת נתונים זמנית.",
  },
  {
    id: 45,
    question: "האם ניתן לגשת ישירות לזיכרון באמצעות פקודות אסמבלי?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, אסמבלי מאפשר גישה ישירה לזיכרון באמצעות פקודות כמו MOV עם כתובות זיכרון.",
  },
  {
    id: 46,
    question: "מהו תפקידו של דגל ה-Zero Flag באסמבלי?",
    type: "multiple",
    correctAnswer: "מציין שתוצאת הפעולה האחרונה הייתה אפס",
    incorrectAnswers: [
      "מציין שארעה חלוקה באפס",
      "מציין שהתוכנית הסתיימה",
      "מציין שיש גלישה אריתמטית",
    ],
    explanation:
      "דגל ה-Zero Flag מוגדר כאשר תוצאת הפעולה האחרונה הייתה אפס, ומשמש לרוב בפקודות תנאי.",
  },
  {
    id: 47,
    question: "האם כל הוראות האסמבלי תופסות אותו מספר בתים בזיכרון?",
    type: "yesno",
    correctAnswer: false,
    explanation:
      "לא, הוראות אסמבלי יכולות לתפוס מספר שונה של בתים בזיכרון, תלוי בסוג ההוראה והאופרנדים שלה.",
  },
  {
    id: 48,
    question: "מהו היתרון העיקרי של תכנות באסמבלי לעומת שפות ברמה גבוהה?",
    type: "multiple",
    correctAnswer: "שליטה מלאה על החומרה ויעילות מרבית",
    incorrectAnswers: [
      "קלות בכתיבת קוד מורכב",
      "ניידות גבוהה בין פלטפורמות שונות",
      "הגנה טובה יותר מפני באגים",
    ],
    explanation:
      "היתרון העיקרי של אסמבלי הוא השליטה המלאה על החומרה, המאפשרת אופטימיזציה מרבית של הקוד.",
  },
  {
    id: 49,
    question: "מהו תפקידה של פקודת PREFETCH?",
    type: "multiple",
    correctAnswer: "טעינה מוקדמת של נתונים לזיכרון המטמון",
    incorrectAnswers: [
      "הקצאת זיכרון מראש",
      "טעינת קוד לפני הרצתו",
      "יצירת עותק גיבוי של נתונים בזיכרון",
    ],
    explanation:
      "פקודת PREFETCH משמשת לטעינה מוקדמת של נתונים לזיכרון המטמון (cache) לפני שהם נדרשים בפועל. זה יכול לשפר את הביצועים על ידי הפחתת ההמתנה לגישה לזיכרון.",
  },
  {
    id: 50,
    question: "מהי מטרתה של טכניקת ה-Memory Mapping?",
    type: "multiple",
    correctAnswer: "מיפוי קבצים או התקנים לזיכרון הוירטואלי של התהליך",
    incorrectAnswers: [
      "יצירת העתק של הזיכרון הפיזי",
      "הצפנת תוכן הזיכרון",
      "חלוקת הזיכרון בין מספר תהליכים",
    ],
    explanation:
      "טכניקת Memory Mapping מאפשרת מיפוי של קבצים או התקני קלט/פלט לתוך מרחב הזיכרון הוירטואלי של התהליך. זה מאפשר גישה לתוכן הקובץ או ההתקן כאילו היה חלק מהזיכרון הרגיל של התוכנית.",
  },
  {
    id: 51,
    question: "מהו תפקידו של אוגר ESP באסמבלי x86?",
    type: "multiple",
    correctAnswer: "מצביע מחסנית",
    incorrectAnswers: [
      "מונה תוכנית",
      "אוגר כללי לחישובים",
      "מצביע לבסיס המחסנית",
    ],
    explanation:
      "אוגר ESP (Extended Stack Pointer) משמש כמצביע מחסנית, מצביע על הכתובת העליונה של המחסנית.",
  },
  {
    id: 52,
    question: "האם ניתן לבצע קריאות למערכת ההפעלה ישירות מקוד אסמבלי?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, ניתן לבצע קריאות מערכת ישירות מאסמבלי באמצעות פסיקות תוכנה או הוראות מיוחדות, תלוי במערכת ההפעלה.",
  },
  {
    id: 53,
    question: "מהו תפקידה של פקודת XCHG באסמבלי?",
    type: "multiple",
    correctAnswer: "החלפת ערכים בין שני אוגרים או בין אוגר לזיכרון",
    incorrectAnswers: [
      "ביצוע פעולת XOR",
      "הרחבת ערך מ-8 ביט ל-16 ביט",
      "בדיקת שוויון בין שני ערכים",
    ],
    explanation:
      "פקודת XCHG (Exchange) משמשת להחלפת ערכים בין שני אוגרים או בין אוגר למיקום בזיכרון.",
  },
  {
    id: 54,
    question: "מהי משמעותה של הקידומת REP לפני פקודה באסמבלי?",
    type: "multiple",
    correctAnswer: "חזרה על הפקודה מספר פעמים",
    incorrectAnswers: [
      "ביטול הפקודה",
      "הפעלת הפקודה במצב מוגן",
      "ביצוע הפקודה רק אם דגל מסוים מוגדר",
    ],
    explanation:
      "הקידומת REP גורמת לחזרה על הפקודה שאחריה מספר פעמים, כאשר המספר נקבע על ידי ערך באוגר CX או ECX.",
  },
  {
    id: 55,
    question: "האם פקודת RET משנה את ערך אוגר EIP?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, פקודת RET משנה את ערך EIP (Instruction Pointer) על ידי שליפת כתובת החזרה מהמחסנית וטעינתה ל-EIP.",
  },
  {
    id: 56,
    question: "מהו תפקידה של פקודת TEST באסמבלי?",
    type: "multiple",
    correctAnswer: "ביצוע פעולת AND לוגי בלי לשמור את התוצאה",
    incorrectAnswers: [
      "בדיקת תקינות של אוגר",
      "השוואה בין שני ערכים",
      "איפוס של אוגר",
    ],
    explanation:
      "פקודת TEST מבצעת פעולת AND לוגי בין שני אופרנדים בלי לשמור את התוצאה, ומשפיעה רק על דגלי המצב.",
  },
];

export default assemblyQuestions;
