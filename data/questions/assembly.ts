import { Questions } from "./models";
const assemblyQuestions: Questions = [
  {
    id: 1,
    question: "מהו תפקידו העיקרי של רגיסטר המחסנית (Stack Pointer)?",
    type: "multiple",
    correctAnswer: "מצביע על ראש המחסנית",
    incorrectAnswers: [
      "מצביע על בסיס המחסנית",
      "מונה את מספר הפעולות",
      "מאחסן את התוצאה האחרונה",
    ],
    explanation:
      "רגיסטר המחסנית (Stack Pointer) מצביע תמיד על ראש המחסנית, כלומר על המיקום האחרון שבו נוסף או הוסר מידע מהמחסנית.",
  },
  {
    id: 2,
    question: "האם ניתן לבצע פעולות אריתמטיות ישירות על ערכים בזיכרון?",
    type: "yesno",
    correctAnswer: false,
    explanation:
      "ברוב ארכיטקטורות המעבד, לא ניתן לבצע פעולות אריתמטיות ישירות על ערכים בזיכרון. בדרך כלל, יש לטעון את הערכים לרגיסטרים, לבצע את הפעולה, ואז לשמור את התוצאה בחזרה בזיכרון אם נדרש.",
  },
  {
    id: 3,
    question: "מהו תפקידו של דגל הגלישה (Overflow Flag)?",
    type: "multiple",
    correctAnswer: "מציין גלישה בפעולות על מספרים עם סימן",
    incorrectAnswers: [
      "מציין שגיאת חלוקה באפס",
      "מסמן סיום של לולאה",
      "מציין שהמחסנית מלאה",
    ],
    explanation:
      "דגל הגלישה (Overflow Flag) מופעל כאשר תוצאה של פעולה אריתמטית על מספרים עם סימן חורגת מהטווח שניתן לייצג במספר הביטים הנתון.",
  },
  {
    id: 4,
    question: "מהי המטרה העיקרית של פעולת הזזה לוגית (Logical Shift)?",
    type: "multiple",
    correctAnswer: "הכפלה או חלוקה בחזקות של 2",
    incorrectAnswers: ["שינוי סדר הביטים", "בדיקת זוגיות", "הצפנת מידע"],
    explanation:
      "פעולת הזזה לוגית משמשת לעתים קרובות להכפלה או חלוקה מהירה בחזקות של 2. הזזה שמאלה מכפילה ב-2, והזזה ימינה מחלקת ב-2.",
  },
  {
    id: 5,
    question: "האם קיים הבדל בין פעולת JUMP לפעולת CALL?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, קיים הבדל משמעותי. פעולת JUMP פשוט מעבירה את זרימת התוכנית למיקום אחר, בעוד פעולת CALL שומרת את כתובת החזרה במחסנית לפני המעבר, מה שמאפשר חזרה לנקודת הקריאה בסיום הפרוצדורה.",
  },
  {
    id: 6,
    question: "מהו תפקידה של פעולת השוואה (CMP) בשפת אסמבלי?",
    type: "multiple",
    correctAnswer: "עדכון דגלים לצורך קבלת החלטות",
    incorrectAnswers: [
      "חיסור שני מספרים",
      "בדיקת שוויון בלבד",
      "החלפת ערכים בין רגיסטרים",
    ],
    explanation:
      "פעולת ההשוואה (CMP) מבצעת חיסור בין שני ערכים ומעדכנת את דגלי המעבד בהתאם לתוצאה, מבלי לשמור את תוצאת החיסור. הדגלים המעודכנים משמשים לאחר מכן לקבלת החלטות בפקודות קפיצה מותנית.",
  },
  {
    id: 7,
    question: "מהי המטרה העיקרית של שימוש במחסנית בתכנות אסמבלי?",
    type: "multiple",
    correctAnswer: "שמירת מצב המעבד וניהול קריאות לפרוצדורות",
    incorrectAnswers: [
      "אחסון קבוע של נתונים",
      "ביצוע חישובים מהירים",
      "ניהול זיכרון דינמי",
    ],
    explanation:
      "המחסנית משמשת בעיקר לשמירת מצב המעבד (כמו ערכי רגיסטרים) ולניהול קריאות לפרוצדורות, כולל שמירת כתובות חזרה והעברת פרמטרים.",
  },
  {
    id: 8,
    question: "האם פעולת XOR של ערך עם עצמו תמיד תניב תוצאה 0?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, פעולת XOR של כל ערך עם עצמו תמיד תניב 0. זוהי תכונה של פעולת ה-XOR, והיא משמשת לעתים קרובות כדרך יעילה לאפס רגיסטר.",
  },
  {
    id: 9,
    question:
      "מהו היתרון העיקרי של שימוש בפקודות מותנות (Conditional Instructions) על פני קפיצות מותנות?",
    type: "multiple",
    correctAnswer: "שיפור ביצועים על ידי הימנעות מניבוי שגוי של סעיפים",
    incorrectAnswers: [
      "הקטנת גודל הקוד",
      "הגברת קריאות הקוד",
      "הקלה על עבודת המהדר",
    ],
    explanation:
      "פקודות מותנות מאפשרות ביצוע פעולות קצרות ללא צורך בקפיצה, מה שמשפר את הביצועים על ידי הימנעות מניבוי שגוי של סעיפים (branch misprediction) במעבדים מודרניים.",
  },
  {
    id: 10,
    question: "האם ניתן לבצע קריאה ישירה למערכת ההפעלה משפת אסמבלי?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, שפת אסמבלי מאפשרת ביצוע קריאות מערכת (system calls) ישירות למערכת ההפעלה. זה נעשה בדרך כלל באמצעות פסיקות תוכנה או הוראות מיוחדות, בהתאם לארכיטקטורה ולמערכת ההפעלה.",
  },
  {
    id: 11,
    question: "מהו תפקידו של סגמנט הקוד (Code Segment) בתכנות אסמבלי?",
    type: "multiple",
    correctAnswer: "אחסון הוראות התוכנית",
    incorrectAnswers: [
      "אחסון משתנים גלובליים",
      "ניהול המחסנית",
      "שמירת קבועים",
    ],
    explanation:
      "סגמנט הקוד (Code Segment) משמש לאחסון הוראות התוכנית. זהו האזור בזיכרון שבו נשמרות ההוראות שהמעבד מבצע.",
  },
  {
    id: 12,
    question: "האם פעולת הזזה אריתמטית (Arithmetic Shift) שומרת על סימן המספר?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, פעולת הזזה אריתמטית שומרת על סימן המספר. בהזזה ימינה, הסיבית השמאלית ביותר (סיבית הסימן) מועתקת לעמדות שמתפנות, ובכך נשמר הסימן.",
  },
  {
    id: 13,
    question: "מהו תפקידו של רגיסטר הדגלים (Flags Register)?",
    type: "multiple",
    correctAnswer: "אחסון מידע על תוצאות פעולות קודמות",
    incorrectAnswers: [
      "ניהול תזמון המעבד",
      "שמירת כתובת ההוראה הנוכחית",
      "אחסון נתונים זמניים",
    ],
    explanation:
      "רגיסטר הדגלים מאחסן מידע על תוצאות פעולות קודמות, כגון האם התוצאה הייתה אפס, האם הייתה גלישה, וכו'. מידע זה משמש לקבלת החלטות בפקודות מותנות.",
  },
  {
    id: 14,
    question: "מהי המטרה העיקרית של פעולת NOP (No Operation)?",
    type: "multiple",
    correctAnswer: "יצירת השהיה או יישור קוד",
    incorrectAnswers: ["איפוס כל הרגיסטרים", "סיום התוכנית", "מחיקת המחסנית"],
    explanation:
      "פעולת NOP משמשת בעיקר ליצירת השהיה קצרה או ליישור קוד למטרות אופטימיזציה. היא לא משנה את מצב המעבד מלבד קידום מונה התוכנית.",
  },
  {
    id: 15,
    question: "האם ניתן לבצע פעולות אריתמטיות על כתובות זיכרון?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, ניתן לבצע פעולות אריתמטיות על כתובות זיכרון. זה מאפשר חישוב כתובות דינמיות, למשל לגישה לאיברים במערך או במבני נתונים מורכבים.",
  },
  {
    id: 16,
    question: "מהו היתרון העיקרי של שימוש ברגיסטרים לעומת משתנים בזיכרון?",
    type: "multiple",
    correctAnswer: "גישה מהירה יותר",
    incorrectAnswers: [
      "קיבולת גדולה יותר",
      "אבטחה משופרת",
      "תאימות בין פלטפורמות",
    ],
    explanation:
      "היתרון העיקרי של שימוש ברגיסטרים הוא הגישה המהירה יותר אליהם לעומת גישה לזיכרון. רגיסטרים הם החלק המהיר ביותר במערכת הזיכרון של המחשב.",
  },
  {
    id: 17,
    question: "מהי מטרתה של פקודת PUSHF?",
    type: "multiple",
    correctAnswer: "דחיפת רגיסטר הדגלים למחסנית",
    incorrectAnswers: [
      "דחיפת כל הרגיסטרים למחסנית",
      "הפעלת כל הדגלים",
      "איפוס רגיסטר הדגלים",
    ],
    explanation:
      "פקודת PUSHF (Push Flags) דוחפת את ערכו הנוכחי של רגיסטר הדגלים למחסנית. זה שימושי לשמירת מצב הדגלים לפני ביצוע פעולות שעשויות לשנות אותם.",
  },
  {
    id: 18,
    question: "האם ניתן לבצע קפיצה לכתובת המאוחסנת ברגיסטר?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, ברוב ארכיטקטורות המעבד ניתן לבצע קפיצה לכתובת המאוחסנת ברגיסטר. זה מאפשר קפיצות דינמיות, שימושיות למימוש טבלאות קפיצה או קריאות לפונקציות וירטואליות.",
  },
  {
    id: 19,
    question: "מהו תפקידה של פקודת LEA (Load Effective Address)?",
    type: "multiple",
    correctAnswer: "חישוב כתובת ללא גישה לזיכרון",
    incorrectAnswers: [
      "טעינת ערך מהזיכרון",
      "ביצוע פעולה אריתמטית",
      "הגדרת תווית בקוד",
    ],
    explanation:
      "פקודת LEA מחשבת כתובת אפקטיבית ומאחסנת אותה ברגיסטר, מבלי לגשת לזיכרון בפועל. היא שימושית לחישובי כתובות מורכבים או כדרך מהירה לביצוע פעולות אריתמטיות פשוטות.",
  },
  {
    id: 20,
    question: "האם שימוש בפסיקות (Interrupts) מאפשר תקשורת בין תוכנה לחומרה?",
    type: "yesno",
    correctAnswer: true,
    explanation:
      "כן, פסיקות משמשות כמנגנון מרכזי לתקשורת בין תוכנה לחומרה. הן מאפשרות להתקני חומרה לאותת למעבד על אירועים, ולתוכנה לבקש שירותים ממערכת ההפעלה או מהחומרה.",
  },
];

export default assemblyQuestions;
